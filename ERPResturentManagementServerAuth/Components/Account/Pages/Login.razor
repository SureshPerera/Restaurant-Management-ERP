@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ERPResturentManagementServerAuth.Data
@using Microsoft.AspNetCore.Components;
@using ERPResturentManagementServerAuth.Components.Layout
@layout ClientLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

@inject NavigationManager Navigation

<PageTitle>Log in</PageTitle>


<div class="row">
    <div class="col-md-4 form" >
        <section style="" >
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="" >
                <DataAnnotationsValidator />
                <h2 style="text-align:center;">Log in</h2>

                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3" style="color:black;">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3" style="color:black;">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div style="color:white;">
                    <p>
                        <a style="color:white;" href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a style="color:white;" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a style="color:white;" href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

<style>
    
    .form{
        position: relative;
        margin-right: 15rem;
        background-color: #000;
        filter: drop-shadow(0 15px 50px #000);
        height: 100%;
        width: 25rem;
        margin: 2rem;
        color: white;
        padding: 20px;
        border-radius: 15px;
        overflow: hidden;
       
    }


</style>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            ReturnUrl = "/administrationHome";

            Navigation.NavigateTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            // Navigation.NavigateTo("Account/LoginWith2fa",
            //     new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            Navigation.NavigateTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
