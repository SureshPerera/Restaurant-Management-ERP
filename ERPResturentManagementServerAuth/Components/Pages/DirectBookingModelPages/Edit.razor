@page "/directbookingmodels/edit"
@using Microsoft.EntityFrameworkCore
@using ERPResturentManagementServerAuth.Model.Reservation
@inject IDbContextFactory<ERPResturentManagementServerAuth.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>DirectBookingModel</h2>
<hr />
@if (DirectBookingModel is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="DirectBookingModel" OnValidSubmit="UpdateDirectBookingModel" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="DirectBookingModel.Id" value="@DirectBookingModel.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="DirectBookingModel.FirstName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DirectBookingModel.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="DirectBookingModel.LastName" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">PhoneNumber:</label>
                    <InputText id="phonenumber" @bind-Value="DirectBookingModel.PhoneNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DirectBookingModel.PhoneNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dathofbirth" class="form-label">DathOfBirth:</label>
                    <InputDate id="dathofbirth" @bind-Value="DirectBookingModel.DathOfBirth" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.DathOfBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="DirectBookingModel.Address" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DirectBookingModel.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emailaddress" class="form-label">EmailAddress:</label>
                    <InputText id="emailaddress" @bind-Value="DirectBookingModel.EmailAddress" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.EmailAddress" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nic" class="form-label">NIC:</label>
                    <InputText id="nic" @bind-Value="DirectBookingModel.NIC" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DirectBookingModel.NIC" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="creditlimit" class="form-label">CreditLimit:</label>
                    <InputNumber id="creditlimit" @bind-Value="DirectBookingModel.CreditLimit" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.CreditLimit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="openingbalanace" class="form-label">OpeningBalanace:</label>
                    <InputNumber id="openingbalanace" @bind-Value="DirectBookingModel.OpeningBalanace" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.OpeningBalanace" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customertypeid" class="form-label">CustomerTypeId:</label>
                    <InputNumber id="customertypeid" @bind-Value="DirectBookingModel.CustomerTypeId" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.CustomerTypeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nationality" class="form-label">Nationality:</label>
                    <InputText id="nationality" @bind-Value="DirectBookingModel.Nationality" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => DirectBookingModel.Nationality" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="remark" class="form-label">Remark:</label>
                    <InputText id="remark" @bind-Value="DirectBookingModel.Remark" class="form-control" />
                    <ValidationMessage For="() => DirectBookingModel.Remark" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/directbookingmodels">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private DirectBookingModel? DirectBookingModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DirectBookingModel ??= await context.DirectBookingModel.FirstOrDefaultAsync(m => m.Id == Id);

        if (DirectBookingModel is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDirectBookingModel()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(DirectBookingModel!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DirectBookingModelExists(DirectBookingModel!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/directbookingmodels");
    }

    private bool DirectBookingModelExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.DirectBookingModel.Any(e => e.Id == id);
    }
}
