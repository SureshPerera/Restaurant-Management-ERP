@page "/Administration/ManageExRates/Edit/{Id:guid}"


@using System.Text.Json.Nodes
@using ResortManagementApp.Models.Administration.DTOS
@using ResortManagementApp.Models.Administration.ManageExRates
@using ResortManagementApp.Pages.ComponentCss

@layout MainLayout
<div class="container">
	<div class="row justify-content-center">
		<div class="col-lg-6">
			<!-- Card -->
			<div class="card shadow-lg">
				<div class="card-header bg-success text-center text-white">
					<h3>Add / Update Package</h3>
				</div>

				<div class="card-body" style="background-color: #F8F9FA; font-size: 15px;">
					@if (ExchangeRatesDto == null)
					{
						<p><Searching /></p>
					}
					else
					{
						<div class="row mb-3">
							<label class="col-md-4 col-form-label">Package Id</label>
							<div class="col-md-6" style="background-color: antiquewhite;">
								<input class="form-control" type="text" @bind="@Id" readonly />
								<span class="text-danger">@Errors["PackageId"]?[0]</span>
							</div>
						</div>

						<div class="row mb-3">
							<label class="col-md-4 col-form-label">Currency Name</label>
							<div class="col-md-6" style="background-color: antiquewhite;">
								<input class="form-control" type="text" @bind="ExchangeRatesDto.CurrencyName" />
								<span class="text-danger">@Errors["CurrencyName"]?[0]</span>
							</div>
						</div>

						<div class="row mb-3">
							<label class="col-md-4 col-form-label">Selling Rate</label>
							<div class="col-md-6">
								<input class="form-control" type="text" @bind="ExchangeRatesDto.SellingRate" />
								<span class="text-danger">@Errors["SellingRate"]?[0]</span>
							</div>
						</div>

						<div class="row mb-3">
							<label class="col-md-4 col-form-label">Room Type</label>
							<div class="col-md-6">
								<input class="form-control" type="text" @bind="ExchangeRatesDto.BuyingRate" />
								<span class="text-danger">@Errors["BuyingRate"]?[0]</span>
							</div>
						</div>

						<div class="d-grid d-md-flex justify-content-md-center mt-4 gap-2">
							<button class="btn btn-success fw-bold" type="button" @onclick="CreateExchangeRate">
								Update
							</button>
							<button class="btn btn-warning fw-bold" type="reset">
								Clear
							</button>
							<a class="btn btn-primary fw-bold" href="/Administration/ManageExRates">
								Back
							</a>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>



<style>
	.form {
		display: flex;
		flex-direction: column;
		background-color: transparent;
		color: black;
		width: 80%;
		font-weight: bold;
		height: fit-content;
	}

	.inp {
		margin-left: 3rem;
	}
</style>

@inject HttpClient http
@inject NavigationManager navManager
@code {
	[Parameter]
	public Guid Id { get; set; }
	public JsonNode Errors { get; set; } = new JsonObject();
	public ExchangeRates? ExchangeRates { get; set; }
	public ExchangeRatesDto ExchangeRatesDto { get; set; } = new();
	
	
	protected override async Task OnParametersSetAsync()
	{
		try
		{

			ExchangeRates = await http.GetFromJsonAsync<ExchangeRates>($"https://localhost:4000/api/ExtraModel/{Id}");
			ExchangeRatesDto.BuyingRate = ExchangeRates?.BuyingRate?? 0;
			ExchangeRatesDto.CurrencyName = ExchangeRates?.CurrencyName?? "";
			ExchangeRatesDto.SellingRate = ExchangeRates?.SellingRate?? 0;
			StateHasChanged();


			Console.WriteLine("Succusfull Loading...");
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exceptions : " + ex.StackTrace);
		}
	}
	private async Task CreateExchangeRate(MouseEventArgs args)
	{
		try
		{
			var response = await http.PutAsJsonAsync(
				$"https://localhost:4000/api/ExtraModel/{Id}", ExchangeRatesDto);

			if (response.IsSuccessStatusCode)
			{
				navManager.NavigateTo("/Administration/ManageExRates");
				StateHasChanged();

			}
			else
			{
				var strResponse = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Update failed: " + strResponse);

				try
				{
					var jsonResponse = JsonNode.Parse(strResponse);
					Errors = jsonResponse?["errors"] ?? new JsonObject();
				}
				catch
				{
					Errors = new JsonObject();
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception: " + ex.Message);
		}
	}
}

