@page "/Administration/ManageAgent/Edit/{Id:guid}"
@using System.Text.Json.Nodes
@using ResortManagementApp.Models.Administration.DTOS
@using ResortManagementApp.Models.Administration.ManageAgents
@using ResortManagementApp.Pages.ComponentCss

@layout MainLayout
<div>
	<h3 class="card mb-3 text-center">Update Agents Details</h3>
</div>
<div class="col-lg-8">
	<h1 class="mb-5">Update Agents</h1>
</div>

<form class="form flex-wrap" style="background-color:antiquewhite; margin-left: 0.5rem;">
	@if (AgentModelDto == null)
	{
		<p><Searching /></p>
	}
	<div class="justify-content-around flex flex-wrap">
		<div class="">
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Agent Name</label>
				<div class="col-md-6" style="background-color:antiquewhite">
					<input class="form-control" type="text" @bind="AgentModelDto.AgentName">
					<span class="text-danger">@Errors["AgentName"]?[0]</span>
				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Agent Address </label>
				<div class="col-md-6">
					<textarea class="form-control" type="text" @bind="AgentModelDto.AgentAddress"></textarea>
					<span class="text-danger">@Errors["AgentAddress"]?[0]</span>
				</div>
			</div>
			<div class="row mb-3">
				<label style="" class="col-md-5 col-form-label">Contact Person</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="AgentModelDto.ContactPerson">
					<span class="text-danger">@Errors["ContactPerson"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Mobile</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="AgentModelDto.Mobile">
					<span class="text-danger">@Errors["Mobile"]?[0]</span>

				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Fax</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="AgentModelDto.Fax">
					<span class="text-danger">@Errors["Fax"]?[0]</span>

				</div>
			</div>

		</div>
		<div class="">
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">NIC</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="AgentModelDto.NIC">
					<span class="text-danger">@Errors["NIC"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Email</label>
				<div class="col-md-6">
					<input class="form-control" type="email" @bind="AgentModelDto.Email">
					<span class="text-danger">@Errors["Email"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Web Site</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="AgentModelDto.WebSite">
					<span class="text-danger">@Errors["WebSite"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Credit Limit</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="AgentModelDto.CreditLimit">
					<span class="text-danger">@Errors["CreditLimit"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-5 col-form-label">Vat Reg No</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="AgentModelDto.VatRegNo">
					<span class="text-danger">@Errors["VatRegNo"]?[0]</span>

				</div>
			</div>
		</div>
		<div class="" style="display:flex; flex-direction: column; gap: 1rem;">

			<div class="offset-md-1 col-md-3 d-grid" style="">
				<button class="btn btn-success fw-bold" style="width:8rem;" type="button" @onclick="CreatePackage">Update</button>
			</div>
			<div class="offset-md-1 col-md-3 d-grid">
				<button class="btn btn-warning fw-bold" style="width:8rem;" type="reset">Clear</button>
			</div>
			<div class="offset-md-1 col-md-3 d-grid">
				<a class="btn btn-primary fw-bold" style="width:8rem;" href="/Administration/ManageAgents">Back</a>
			</div>
		</div>
	</div>




</form>



<style>
	.form {
		display: flex;
		flex-direction: column;
		background-color: transparent;
		color: black;
		width: 80%;
		font-weight: bold;
		height: fit-content;
	}

	.inp {
		margin-left: 3rem;
	}
</style>



@inject HttpClient http
@inject NavigationManager navManager
@code {
	[Parameter]
	public Guid Id { get; set; }
	public JsonNode Errors { get; set; } = new JsonObject();
	public Agents? Agents { get; set; } = new Agents();
	public AgentModelDto? AgentModelDto { get; set; } = new();
	
	protected override async Task OnParametersSetAsync()
	{
		try
		{

			Agents = await http.GetFromJsonAsync<Agents>($"https://localhost:4000/api/Agent/{Id}");
			AgentModelDto.AgentName = Agents?.AgentName?? "";
			AgentModelDto.AgentAddress = Agents?.AgentAddress ?? "";
			AgentModelDto.ContactPerson = Agents?.ContactPerson ?? "";
			AgentModelDto.Email = Agents?.Email?? "";
			AgentModelDto.CreditLimit = Agents?.CreditLimit ?? 0;
			AgentModelDto.Fax = Agents?.Fax ?? "";
			AgentModelDto.Mobile = Agents?.Mobile ?? "";
			AgentModelDto.WebSite = Agents?.WebSite ?? "";
			AgentModelDto.NIC = Agents?.NIC ?? "";
			AgentModelDto.VatRegNo = Agents?.VatRegNo ?? "";
			

			Console.WriteLine("Succusfull Loading...");
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exceptions : " + ex.StackTrace);
		}
	}
	private async Task CreatePackage(MouseEventArgs args)
	{
		try
		{
			var response = await http.PutAsJsonAsync(
				$"https://localhost:4000/api/Agent/{Id}", AgentModelDto);

			if (response.IsSuccessStatusCode)
			{
				navManager.NavigateTo("/Administration/ManageAgents");
			}
			else
			{
				var strResponse = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Update failed: " + strResponse);

				try
				{
					var jsonResponse = JsonNode.Parse(strResponse);
					Errors = jsonResponse?["errors"] ?? new JsonObject();
				}
				catch
				{
					Errors = new JsonObject();
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception: " + ex.Message);
		}
	}
}


