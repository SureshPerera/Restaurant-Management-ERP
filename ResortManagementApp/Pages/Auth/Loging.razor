@page "/Auth/Loging"
@using ResortManagementApp.Models.Auth
@using ResortManagementApp.Models.Auth.AuthDto
@layout LoginDisplay

<div style="">
    <div class="login-wrapper">
        <div class="login-container">
            <!-- Header -->
            <div class="login-header">
                <div class="logo-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z" />
                    </svg>
                </div>
                <h1 class="login-title">Welcome Back</h1>
                <p class="login-subtitle">Resort Management System</p>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    ⚠️ @errorMessage
                </div>
            }
            <form class="login-form" @onsubmit="AsncyLoging">
                <div class="form-group">
                    <label class="form-label" for="username">
                        <svg class="label-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                        Username
                    </label>
                    <input type="text"
                           id="username"
                           class="form-input"
                           @bind="UserName"
                           placeholder="Enter your username"
                           required
                           autocomplete="username" />
                </div>

                <div class="form-group">
                    <label class="form-label" for="password">
                        <svg class="label-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                            <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                        </svg>
                        Password
                    </label>
                    <div class="password-wrapper">
                        <input type="password"
                               id="password"
                               class="form-input"
                               @bind="PassWord"
                               placeholder="Enter your password"
                               required
                               autocomplete="current-password" />
                    </div>
                    <div class="forgot-password">
                        <a href="Auth/FogetPassword">Forgot Password?</a>
                    </div>
                </div>

                <button type="submit" class="btn-login" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
                <div class="divider">
                    <span>OR</span>
                </div>

                <a href="/" class="btn-back">← Back to Home</a>
            </form>
            <div class="security-badge">
                <svg class="security-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z" />
                </svg>
                Secure Login • Your data is protected
            </div>
        </div>
    </div>
</div>



<style>
    /* Compact Colorful Login Design */

    .login-wrapper {
        min-height: 80vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        padding: 1rem;
        position: relative;
        overflow: hidden;
    }

        /* Animated Background Circles */
        .login-wrapper::before,
        .login-wrapper::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            opacity: 0.3;
            animation: float 10s infinite ease-in-out;
        }

        .login-wrapper::before {
            width: 200px;
            height: 200px;
            background: radial-gradient(circle, #ffd89b, transparent);
            top: 10%;
            left: 10%;
        }

        .login-wrapper::after {
            width: 300px;
            height: 300px;
            background: radial-gradient(circle, #a8edea, transparent);
            bottom: 10%;
            right: 10%;
            animation-delay: -5s;
        }

   
    /* Compact Login Container */
    .login-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 25px;
        padding: 2rem 1.8rem;
        width: 440px;
        max-width: 90vw;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.5) inset;
        position: relative;
        z-index: 1;
        animation: popIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

   

    /* Colorful Top Border */
    .login-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(90deg, #667eea, #764ba2, #f093fb, #ffd89b);
        border-radius: 25px 25px 0 0;
        background-size: 200% 100%;
        animation: gradientSlide 3s ease infinite;
    }

    /* Header */
    .login-header {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .logo-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #667eea, #764ba2);
        border-radius: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        animation: bounce 2s infinite;
    }

   

    .logo-icon svg {
        width: 30px;
        height: 30px;
        fill: #fff;
    }

    .login-title {
        font-size: 1.8rem;
        font-weight: 800;
        margin: 0 0 0.3rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .login-subtitle {
        color: #666;
        font-size: 0.9rem;
        font-weight: 500;
    }

    /* Form */
    .login-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
    }

    .form-label {
        color: #333;
        font-weight: 600;
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.4rem;
    }

    .label-icon {
        width: 16px;
        height: 16px;
        color: #667eea;
    }

    .form-input {
        padding: 0.8rem 1rem;
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        font-size: 0.95rem;
        color: #333;
        background: #fff;
        transition: all 0.3s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .form-input::placeholder {
            color: #aaa;
        }

    .forgot-password {
        text-align: right;
        margin-top: 0.2rem;
    }

        .forgot-password a {
            color: #667eea;
            text-decoration: none;
            font-size: 0.8rem;
            font-weight: 600;
            transition: color 0.3s;
        }

            .forgot-password a:hover {
                color: #764ba2;
            }

    /* Buttons */
    .btn-login {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 0.9rem;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        margin-top: 0.5rem;
        position: relative;
        overflow: hidden;
    }

        .btn-login::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }

        .btn-login:hover::before {
            left: 100%;
        }

        .btn-login:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5);
        }

        .btn-login:active {
            transform: translateY(-1px);
        }

        .btn-login:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .btn-back {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
        padding: 0.8rem;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: block;
        text-align: center;
    }

        .btn-back:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    /* Divider */
    .divider {
        display: flex;
        align-items: center;
        margin: 1rem 0;
    }

        .divider::before,
        .divider::after {
            content: '';
            flex: 1;
            height: 1px;
            background: linear-gradient(90deg, transparent, #ddd, transparent);
        }

        .divider span {
            padding: 0 0.8rem;
            color: #999;
            font-size: 0.8rem;
            font-weight: 600;
        }

    /* Security Badge */
    .security-badge {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.4rem;
        margin-top: 1rem;
        padding: 0.6rem;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
        border-radius: 10px;
        color: #667eea;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .security-icon {
        width: 14px;
        height: 14px;
        animation: pulse 2s infinite;
    }

   
    /* Error Message */
    .error-message {
        background: linear-gradient(135deg, #ff6b6b, #ee5a6f);
        color: white;
        padding: 0.8rem;
        border-radius: 10px;
        font-size: 0.85rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 1rem;
        animation: shake 0.5s, slideDown 0.3s;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

    
</style>

@inject NavigationManager navManager
@inject HttpClient http
@code {
	public List<RegistationDto> RegistationDto { get; set; } = new List<RegistationDto>();
	private string? PassWord { get; set; } = string.Empty;
	private string? UserName { get; set; } = string.Empty;
	private string errorMessage { get; set; } = string.Empty;
	private bool isLoading { get; set; } = false;
	
	public async Task AsncyLoging()
	{
		errorMessage = string.Empty;
		isLoading = true;

		StateHasChanged();
		Console.WriteLine($"password : {PassWord} , userName : {UserName}");
		await Task.Delay(1500);
		await GetRegistation();


	}
	public async Task GetRegistation()
	{
		var regDate = await http.GetFromJsonAsync<RegistationDto>($"https://localhost:4000/api/Registation/{UserName}");
		if (regDate != null)
		{
			Console.WriteLine($"Registaion data loaded...");
			if (regDate.Password == PassWord)
			{
				navManager.NavigateTo("/Reservations/Dashboard");
				Console.WriteLine("User name : " + UserName + " " + " Password : " + PassWord);
			}
			else
			{
				errorMessage = "Invalid username or password.";
				Console.WriteLine("Fail to loging....");
			}
			isLoading = false;
			StateHasChanged();

		}

	}
}
