@page "/Reservations/Delete/{Id:guid}"
@using ResortManagementApp.Models.Reservation
@using ResortManagementApp.Models.Reservation.DTO
@using ResortManagementApp.Pages.ComponentCss
@layout MainLayout

<div class="container">
	<div class="row justify-content-center">
		<div class="col-lg-6">
			<!-- Card -->
			<div class="card shadow-lg">
				<div class="card-header bg-danger text-center text-white">
					<h3>Delete Customer</h3>
				</div>

				<div class="card-body text-center" style="background-color: #A3B18A; font-weight: bold; font-size: 15px;">
					@if (directBookingModel == null)
					{
						<p><Searching /></p>
					}
					else
					{
						<p>
							Are you sure you want to delete customer
							<br />
							<strong>@directBookingModel.FirstName @directBookingModel.LastName</strong>?
						</p>

						<!-- Action Buttons -->
						<div class="d-grid d-md-flex justify-content-md-center mt-4 gap-2">
							<button class="btn btn-danger fw-bold" @onclick="DeleteCustomer">Delete</button>
							<a class="btn btn-secondary fw-bold" href="/Reservations/DirectBooking">Cancel</a>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>

@inject HttpClient http
@inject NavigationManager navManager


@code {
	[Parameter]
	public Guid Id { get; set; }
	public DirectBookingModel? directBookingModel;
	public DirectBookinDTO directBookingDTO = new();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Fetch the customer's info by ID
			 directBookingModel = await http.GetFromJsonAsync<DirectBookingModel>($"https://localhost:4000/api/DirectBooking/{Id}");
			StateHasChanged();

		}
		catch (Exception ex)
		{
			Console.WriteLine("Error loading customer: " + ex.Message);
		}
	}
	

	public async Task DeleteCustomer()
	{
		try
		{
			var responce = await http.DeleteFromJsonAsync<DirectBookingModel>($"https://localhost:4000/api/DirectBooking/{Id}");
			
			navManager.NavigateTo("/Reservations");
		}
		catch (Exception ex)
		{
			Console.WriteLine("Erro : " + ex.Message);
		}
	}
	
}
