@page "/Reservations/Edit/{Id:guid}"
@using ResortManagementApp.Models.Reservation.DTO
@using ResortManagementApp.Models.Reservation
@using System.Text.Json.Nodes
@using ResortManagementApp.Pages.ComponentCss

@layout MainLayout
<div>
	<h3 class="card mb-3 text-center">Edit Customer</h3>
</div>
	<div class="col-lg-8">
			<h1 class="mb-5">Edit Customer</h1>
		</div>
<form class="row form" style="height:43rem">
	@if(directBookingModel == null)
	{
		<p><Searching/></p>
	}
	  
	<div class="flex">
		<div class="row mb-3">
			<label class="col-md-5 col-form-label">First Name</label>
			<div class="col-md-4">
				<input style="margin-left:1.9rem;width:9rem" class="form-control" @bind="directBookingDTO.FirstName">
				<span class="text-danger">@Errors["FirstName"]?[0]</span>
			</div>
		</div>
		<div class="row mb-4">
			<label style="margin-left:1.9rem" class="col-md-3 col-form-label">L - Name</label>
			<div class="col-md-7">
				<input class="form-control" @bind="directBookingDTO.LastName">
			</div>
		</div>
	</div>
	
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">Address</label>
		<div class="col-md-6">
			<textarea class="form-control" @bind="directBookingDTO.Address"></textarea>
			<span class="text-danger">@Errors["FirstName"]?[0]</span>

		</div>
	</div><div class="row mb-3">
		<label class="col-md-2 col-form-label">Phone Number</label>
		<div class="col-md-6">
			<input class="form-control" type="number" @bind="directBookingDTO.PhoneNumber">
			<span class="text-danger">@Errors["PhoneNumber"]?[0]</span>

		</div>
	</div>
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">Email Address</label>
		<div class="col-md-6">
			<input class="form-control" type="email" @bind="directBookingDTO.EmailAddress">
			<span class="text-danger">@Errors["Address"]?[0]</span>

		</div>
	</div>
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">NIC Number</label>
		<div class="col-md-6">
			<input class="form-control" @bind="directBookingDTO.NIC">
			<span class="text-danger">@Errors["NIC"]?[0]</span>

		</div>
	</div>

	<div class="row mb-3">
		<label class="col-md-2 col-form-label">Date Of Birthday</label>
		<div class="col-md-6">
			<input class="form-control" type="date" @bind="directBookingDTO.DathOfBirth">
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">Nationality</label>
		<div class="col-md-6">
			<input class="form-control" @bind="directBookingDTO.Nationality">
			<span class="text-danger">@Errors["Nationality"]?[0]</span>

		</div>
	</div>
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">CreditLimit</label>
		<div class="col-md-6">
			<input class="form-control" type="number" @bind="directBookingDTO.CreditLimit">
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-md-2 col-form-label">Remark</label>
		<div class="col-md-6">

			<textarea class="form-control" @bind="directBookingDTO.Remark"></textarea>
		</div>
	</div>
	<div style="margin-top:-28rem;">
		<div class="row gap-2" style="justify-content:right; margin-top:-10rem;">

			<div class="offset-md-4 col-md-4 d-grid">
				<button class="btn btn-success fw-bold" type="button" @onclick="UpdateCustomer">Update Customer</button>
			</div>
			<div class="offset-md-4 col-md-4 d-grid">
				<button class="btn btn-warning fw-bold" type="reset">Clear</button>
			</div>
			<div class="offset-md-4 col-md-4 d-grid">
				<a class="btn btn-primary fw-bold" href="/Reservations/DirectBooking">Back</a>
			</div>
		</div>
	</div>
	
</form>
<style>
	.form {
		display: flex;
		flex-direction: column;
		background-color: transparent;
		color: black;
		width: 60rem;
		margin:1rem;
		font-weight:bold;
	}
</style>
@inject HttpClient http
@inject NavigationManager navManager
@code {
	[Parameter]
	public Guid Id{ get; set; }
	public DirectBookingModel? directBookingModel;
	public DirectBookinDTO directBookingDTO = new();
	public JsonNode Errors { get; set; } = new JsonObject();
	public  Models.Reservation.CustomerType[] customerTypes = Array.Empty<Models.Reservation.CustomerType>();



	protected override async Task OnParametersSetAsync()
	{
		try
		{
			customerTypes = Enum.GetValues<Models.Reservation.CustomerType>();
			directBookingModel = await http.GetFromJsonAsync<DirectBookingModel>($"https://localhost:4000/api/DirectBooking/{Id}");
			directBookingDTO.FirstName = directBookingModel?.FirstName??"";
			directBookingDTO.LastName = directBookingModel?.LastName ?? "";
			directBookingDTO.Address = directBookingModel?.Address ?? "";
			directBookingDTO.PhoneNumber = directBookingModel?.PhoneNumber ?? "";
			directBookingDTO.DathOfBirth = directBookingModel?.DathOfBirth;
			directBookingDTO.NIC = directBookingModel?.NIC ?? "";
			directBookingDTO.CreditLimit = directBookingModel?.CreditLimit;
			directBookingDTO.OpeningBalanace = directBookingModel?.OpeningBalanace;
			directBookingDTO.Nationality = directBookingModel?.Nationality ?? "";
			directBookingDTO.Remark = directBookingModel?.Remark ?? "";
			directBookingDTO.EmailAddress = directBookingModel?.EmailAddress ?? "";
			Console.WriteLine("Succusfull");

		}catch(Exception ex)
		{
			Console.WriteLine("Exceptions : " + ex.StackTrace);
		}
	} 
	protected async Task UpdateCustomer()
	{
		var responce = await http.PutAsJsonAsync($"https://localhost:4000/api/DirectBooking/{Id}", directBookingDTO);
		if (responce.IsSuccessStatusCode) { navManager.NavigateTo("/Reservations/DirectBooking"); }

		var strResponce = await responce.Content.ReadAsStringAsync();
		try
		{
			var jsonResponce = JsonNode.Parse(strResponce);
			Errors = jsonResponce?["errors"] ?? new JsonObject();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Erro Message : " + ex.Message);
		}
	}
}
