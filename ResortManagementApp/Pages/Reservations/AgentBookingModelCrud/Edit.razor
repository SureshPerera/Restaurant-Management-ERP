@page "/Reservations/AgentBooking/Edit/{Id:guid}"

@using ResortManagementApp.Models.Administration.DTOS
@using ResortManagementApp.Models.Administration.ManageAgents
@using ResortManagementApp.Models.Reservation.DTO
@using System.Text.Json.Nodes
@using ResortManagementApp.Pages.ComponentCss

@layout MainLayout
<div class="card">
	<h3 class="mb-3 text-center">Update Agent</h3>
</div>

<div class="col-lg-8">
	<h1 class="title mb-5">Update Agent Booking</h1>
</div>


<form class="form">
	@if (Agent == null)
	{
		<p><Searching/></p>
	}
	<div class="flex">
		<div class="row">
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Agent Id</label>
				<div class="col-md-6" style="background-color:antiquewhite">
					<input class="form-control" type="text" @bind="@Id" readonly>
					<span class="text-danger">@Errors["AgentId"]?[0]</span>
				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Agent Name</label>
				<div class="col-md-6">
					<input class="form-control" @bind="Agent.AgentName">
					<span class="text-danger">@Errors["AgentName"]?[0]</span>
				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Address</label>
				<div class="col-md-6">
					<textarea class="form-control" @bind="Agent.AgentAddress"></textarea>
					<span class="text-danger">@Errors["AgentAddress"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Contact Person</label>
				<div class="col-md-6">
					<textarea class="form-control" @bind="Agent.ContactPerson"></textarea>
					<span class="text-danger">@Errors["ContactPerson"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Phone Number</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="Agent.Mobile">
					<span class="text-danger">@Errors["Mobile"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-2 col-form-label">Email Address</label>
				<div class="col-md-6">
					<input class="form-control" type="email" @bind="Agent.Email">
					<span class="text-danger">@Errors["Email"]?[0]</span>

				</div>
			</div>

		</div>
		<div class="row">
			<div class="row mb-3">
				<label class="col-md-3 col-form-label">Fax</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="Agent.Fax">
					<span class="text-danger">@Errors["Fax"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-3 col-form-label">Vat Reg No</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="Agent.VatRegNo">
					<span class="text-danger">@Errors["VatRegNo"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-3 col-form-label">Web Site</label>
				<div class="col-md-6">
					<input class="form-control" type="text" @bind="Agent.WebSite">
					<span class="text-danger">@Errors["WebSite"]?[0]</span>

				</div>
			</div>
			<div class="row mb-3">
				<label class="col-md-3 col-form-label">NIC Number</label>
				<div class="col-md-6">
					<input class="form-control" @bind="Agent.NIC">
					<span class="text-danger">@Errors["NIC"]?[0]</span>

				</div>
			</div>


			<div class="row mb-3">
				<label class="col-md-3 col-form-label">Credit Limit</label>
				<div class="col-md-6">
					<input class="form-control" type="number" @bind="Agent.CreditLimit">
				</div>
			</div>
		</div>
		<div>
			<div style="">
				<div class="row gap-2" style="">

					<div class="offset-md-4 col-md-4 d-grid">
						<button class="btn btn-success fw-bold" type="button" @onclick="UpdateCustomer">Update Agent</button>
					</div>
					<div class="offset-md-4 col-md-4 d-grid">
						<button class="btn btn-warning fw-bold" type="reset">Clear</button>
					</div>
					<div class="offset-md-4 col-md-4 d-grid">
						<a class="btn btn-primary fw-bold" href="/Reservations/AgentBooking">Back</a>
					</div>
				</div>
			</div>
		</div>
	</div>

</form>
<style>
	.form {
		display: flex;
		flex-direction: column;
		background-color: transparent;
		color: black;
		width: 60rem;
		font-weight: bold;
	}
</style>

@inject HttpClient http
@inject NavigationManager navManager
@code {
	[Parameter]
	public Guid Id { get; set; }
	// public DirectBookinDTO directBookingDTO { set; get; } = new();
	public Agents? Agent = new Agents();
	public JsonNode Errors { set; get; } = new JsonObject();
	public AgentModelDto agentModelDto = new();
	protected override async Task OnInitializedAsync()
	{
		try
		{
			Agent = await http.GetFromJsonAsync<Agents>($"https://localhost:4000/api/Agent/{Id}");
			agentModelDto.NIC = Agent.NIC ?? "";
			agentModelDto.WebSite = Agent.WebSite ?? "";
			agentModelDto.Mobile = Agent.Mobile ?? "";
			agentModelDto.Email = Agent.Email ?? "";
			agentModelDto.Fax = Agent.Fax ?? "";
			agentModelDto.AgentAddress = Agent.AgentAddress ?? "";
			agentModelDto.AgentName = Agent.AgentName ?? "";
			agentModelDto.ContactPerson = Agent.ContactPerson ?? "";
			agentModelDto.CreditLimit = Agent.CreditLimit ?? 0;
			agentModelDto.VatRegNo = Agent.VatRegNo ?? "";

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}

	private async Task UpdateCustomer(MouseEventArgs args)
	{
		var responce = await http.PutAsJsonAsync($"https://localhost:4000/api/Agent/{Id}", agentModelDto);
		if (responce.IsSuccessStatusCode) { navManager.NavigateTo("/Reservations/AgentBooking"); }

		var strResponce = await responce.Content.ReadAsStringAsync();
		try
		{
			var jsonResponce = JsonNode.Parse(strResponce);
			Errors = jsonResponce?["errors"] ?? new JsonObject();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Erro Message : " + ex.Message);
		}
	}
}
