@page "/Reservations/CheckInOut"
@using MudBlazor
@using ResortManagementApp.Models.Reservation
@using ResortManagementApp.Models.Reservation.DTO
@using ResortManagementApp.Models.Reservation.OnlineBookingModel
@using ResortManagementApp.Pages.ComponentCss
@using System.Text.Json
@using System.Text
@layout MainLayout
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Nav

<div class="container-fluid my-4">
	<!-- Header -->
	<div class="mb-5 text-center">
		<h2 class="fw-bold" style="color:#2f3e46;">Check-In / Check-Out</h2>
		<p class="text-muted">Easily manage guest arrivals, departures, and reservations</p>
	</div>

	<!-- Search & Filters -->
	<div class="card rounded-4 mb-5 border-0 shadow-lg" style="background: linear-gradient(135deg, #fefae0, #e9edc9);">
		<div class="card-body py-4">
			<div class="row g-4 align-items-end">

				<!-- Search -->
				<div class="col-md-4">
					<label class="form-label fw-semibold">Search Guests</label>
					<div class="input-group input-group-lg">
						<span class="input-group-text border-end-0 bg-white">
							<i class="bi bi-search text-muted"></i>
						</span>
						<input type="search" id="search" class="form-control border-start-0" placeholder="Enter name, NIC, or phone..." />
					</div>
				</div>

				<!-- Date Range -->
				<div class="col-md-4">
					<label class="form-label fw-semibold">Date Range</label>
					<div class="d-flex gap-2">
						<div class="flex-fill">
							<div class="input-group">
								<span class="input-group-text bg-white">
									<i class="bi bi-calendar-event text-muted"></i>
								</span>
								<input type="date" id="fromDate" class="form-control" />
							</div>
						</div>
						<div class="flex-fill">
							<div class="input-group">
								<span class="input-group-text bg-white">
									<i class="bi bi-calendar-check text-muted"></i>
								</span>
								<input type="date" id="toDate" class="form-control" />
							</div>
						</div>
					</div>
				</div>

				<!-- Action -->
				<div class="col-md-4">
					<label class="form-label fw-semibold invisible">Action</label>
					<button class="btn btn-lg w-100 shadow-sm"
							style="background-color:#588157; color:white;"
							@onclick="clickViewAllReservations">
						<i class="bi bi-eye me-2"></i> View Reservations
					</button>
				</div>
			</div>
		</div>
	</div>
</div>
<div>
	<!-- Reservation Table -->
	<div class="row">
		<div class="col-lg-10 mx-auto">
			@if (directBookingModels == null)
			{
				<div class="d-flex justify-content-center py-5">
					<Searching />
				</div>
			}
			else
			{
				<div class="card rounded-3 border-0 shadow-sm">
					<div class="card-header" style="background-color:#588157; color:white;">
						<h5 class="mb-0">All Reservations</h5>
					</div>
					<div class="card-body p-0">
						<div class="table-responsive">
							<table class="table-hover mb-0 table align-middle">
								<thead style="background-color:#dad7cd;" class="text-center">
									<tr>
										<th>Id</th>
										<th>Name</th>
										<th>Check-In</th>
										<th>Time</th>
										<th>Check-Out</th>
										<th>Time</th>
										<th>Status</th>
										<th>Type</th>
										<th class="text-center">Actions</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var item in directBookingModels)
									{
										<tr class="text-center">
											<td>@item.Id</td>
											<td>@($"{item.FirstName} {item.LastName}")</td>
											<td>@item.CheckInDate.ToString("yyyy-MM-dd")</td>
											<td>@item.CheckInTime</td>
											<td>@item.CheckOutDate.ToString("yyyy-MM-dd")</td>
											<td>@item.CheckOutTime</td>
											<td>
												@if (item.Conformation)
												{
													<span class="badge bg-success">Confirmed</span>
												}
												else
												{

													<span class="badge bg-warning text-dark">Pending</span>
												}
											</td>
											<td>@item.CustomerType</td>
											<td>
												<button class="btn btn-sm btn-outline-primary"
														@onclick="() => ClickConformationsDirect(item.Id)">
													Bill View
												</button>
											</td>
										</tr>
									}

									@foreach (var item in onlineBookingModels!)
									{
										<tr class="text-center">
											<td>@item.Id</td>
											<td>@($"{item.FirstName} {item.LastName}")</td>
											<td>@item.CheckInDate</td>
											<td>@item.CheckInTime</td>
											<td>@item.CheckOutDate</td>
											<td>@item.CheckOutTime</td>
											<td>
												@if (item.Conformation)
												{
													<span class="badge bg-success">Confirmed</span>
												}
												else
												{

													<span class="badge bg-warning text-dark">Pending</span>
												}
											</td>
											<td>@item.CustomerType</td>
											<td>
												<button class="btn btn-sm btn-outline-primary"
														@onclick="() => ClickConformationsOnline(item.Id)">
													Bill View
												</button>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			}
		</div>
	</div>

	<!-- Invoice Section -->
	@if (PagedateLoad)
	{
		<section id="invoice-section" class="my-5">
			<div class="row g-4">
				<!-- Sidebar Actions -->
				<div class="col-md-3">
					<div class="card rounded-3 border-0 shadow-sm">
						<div class="card-body d-flex flex-column gap-2">
							<div class="rounded p-2" style="background-color:#fefae0;">
								<strong>Status:</strong>
								@if (Conformation)
								{
									<span class="badge bg-success">Confirmed</span>
								}
								else
								{
									<span class="badge bg-warning text-dark">Pending</span>
								}
							</div>
							<div class="rounded p-2" style="background-color:#fefae0;">
								<strong>Balance:</strong>
								<span class="text-success">@totalBalanceLKR</span>
							</div>

							@if (Conformation)
							{
								if (!CheckIn)
								{
									<MudButton @onclick="clickUnConform" Variant="Variant.Filled" Color="Color.Warning">
										UnConfirm
									</MudButton>
								}
							}
							else
							{
								<MudButton @onclick="clickConform" Variant="Variant.Filled" Color="Color.Success">
									Confirm
								</MudButton>
							}

							@if (!CheckIn)
							{
								<button class="btn btn-primary w-100" @onclick="@(() => clickAdvancePay(Id))">
									Advance Payment
								</button>
							}

							<button class="btn btn-info w-100">GRC Print</button>
							<button class="btn btn-info w-100">RCV Print</button>

							<button class="btn btn-danger w-100" @onclick="clickCancellation">
								Cancellation
							</button>

							@if (!CheckIn)
							{
								<button class="btn btn-dark w-100" @onclick="ClickCheckIn">
									Check-In
								</button>
							}

							@if (CheckIn && !CheckOut)
							{
								<button class="btn btn-success w-100" @onclick="ClickCheckOut">
									Check-Out
								</button>
							}
						</div>
					</div>
				</div>

				<div class="col-lg-9">
					<div class="card rounded-3 border-0 shadow-sm">
						<div class="card-header bg-secondary text-white">
							<h6 class="mb-0">Invoice</h6>
						</div>
						<div class="card-body">
							<!-- Main Invoice Area -->
							<div class="container-fluid bg-light p-4" style="font-size: 15px;">
								<!-- Header -->
								<section class="mb-3">
									<div class="d-flex justify-content-between align-items-center flex-wrap rounded bg-white p-3 shadow-sm">
										<!-- Logo + Bill Info -->
										<div class="text-center">
											<img src="/imgs/maindashboard/logo.png" width="150" height="150" class="mb-2" />
											<div>
												<label class="fw-bold">Master Room Bill : <span class="text-primary">10</span></label>
											</div>
										</div>

										<!-- Resort Info -->
										<div class="bg-light rounded-3 p-3 shadow-sm">
											<h5 class="fw-bold">Solitory Green Resort</h5>
											<p class="mb-0">Oddington Estate,<br />Lindula,<br />Nuwara Eliya, Sri Lanka.</p>
											<p class="mb-0">📞 0761733573</p>
											<p class="mb-0">✉️ sgncabins6@gmail.com</p>
										</div>
									</div>
								</section>

								<!-- Invoice Info -->
								<section class="mb-3 rounded bg-white p-3 shadow-sm">
									<h6 class="bg-success rounded p-2 text-white">Proforma Invoice</h6>
									<div class="row g-3">
										<div class="col-md-6">
											<div class="d-flex justify-content-between mb-2">
												<label>Reserve Num :</label>
												<input readonly class="form-control form-control-sm w-50" value="@Id" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Status :</label>
												<input readonly class="form-control form-control-sm w-50" value="@Conformation" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Check In Type :</label>
												<input readonly class="form-control form-control-sm w-50" value="" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Customer Type :</label>
												<input readonly class="form-control form-control-sm w-50" value="@CustomerType" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Accommodation Type :</label>
												<input readonly class="form-control form-control-sm w-50" value="@AccomadationType" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Voucher No :</label>
												<input readonly class="form-control form-control-sm w-50" value="" />
											</div>
											<div class="d-flex justify-content-between mb-2">
												<label>Tour No :</label>
												<input readonly class="form-control form-control-sm w-50" value="" />
											</div>
										</div>

										<!-- Customer Info -->
										<div class="col-md-6">
											<h6 class="bg-success rounded p-2 text-white">Customer Details</h6>
											<p><strong>Name:</strong> @name</p>
											<p><strong>Address:</strong> @address</p>
											<p><strong>Phone:</strong> @phone</p>
											<p><strong>Email:</strong> @email</p>
											<p><strong>Agent Name:</strong> @agentName</p>
											<div class="d-flex gap-4">
												<p><strong>Adults:</strong> @adults</p>
												<p><strong>Kids:</strong> @kids</p>
											</div>
											<div class="d-flex gap-4">
												<p><strong>USD Exch.:</strong> <input readonly class="form-control form-control-sm w-25" value="Rs 300" /></p>
												<p><strong>Room rate/day:</strong> <input readonly class="form-control form-control-sm w-25" value="@RoomRate" /></p>
											</div>
										</div>
									</div>
								</section>

								<!-- Stay Info -->
								<section class="mb-3 rounded bg-white p-3 shadow-sm">
									<h6 class="bg-success rounded p-2 text-white">Total Stay (USD)</h6>
									<div class="row text-center">
										<div class="col">
											<label>From</label><br />
											<span>@CheckInDate</span>
										</div>
										<div class="col">
											<label>To</label><br />
											<span>@CheckOutDate</span>
										</div>
										<div class="col">
											<label>Basis</label><br />
											<span>Full Board</span>
										</div>
										<div class="col">
											<label>Adults Stay</label><br />
											<span>@adults</span>
										</div>
										<div class="col">
											<label>Kid Stay</label><br />
											<span>@kids</span>
										</div>
										<div class="col">
											<label>Total</label><br />
											<span>@total</span>
										</div>
									</div>
								</section>

								<!-- Dates -->
								<section class="mb-3 rounded bg-white p-3 shadow-sm">
									<h6 class="bg-success rounded p-2 text-white">Check-In / Check-Out</h6>
									<div class="row">
										<div class="col-md-6">
											<label>Check-In Date:</label>
											<input readonly type="date" class="form-control form-control-sm" />
											<label>Arrival Time:</label>
											<input type="time" class="form-control form-control-sm" value="@arrivalTime" />
										</div>
										<div class="col-md-6">
											<label>Check-Out Date:</label>
											<input readonly type="date" class="form-control form-control-sm" />
											<label>Departure Time:</label>
											<input type="time" class="form-control form-control-sm" value="@depatureTime" />
										</div>
									</div>
								</section>

								<!-- Description -->
								<section class="mb-3 rounded bg-white p-3 shadow-sm">
									<h6 class="bg-success rounded p-2 text-white">Description</h6>
									<div class="d-flex justify-content-between"><span>+ Adults Stay Total (LKR)</span><span>@adultsStayTotal</span></div>
									<div class="d-flex justify-content-between"><span>+ Kids Stay Total (LKR)</span><span>@kidsStayTotal</span></div>
									<div class="d-flex justify-content-between"><span>Grand Total (LKR) incl. tax</span><span>@grandTotal</span></div>
									<div class="d-flex justify-content-between"><span>- Total Advance Payment</span><span>@totalAdvancePayment</span></div>
									<div class="d-flex justify-content-between"><span>Total Balance (LKR)</span><span>@totalBalanceLKR</span></div>
									<div class="d-flex justify-content-between"><span>Total Balance (USD)</span><span>@totalBalanceUSD</span></div>
								</section>

								<!-- Footer -->
								<section class="mt-3 text-center">
									<p class="mb-1"><strong>Remark:</strong> Transparent Management</p>
									<p class="text-muted small mb-0">Powered by Liya SOFT PVT</p>
								</section>
							</div>
						</div>
					</div>
				</div>
				
			</div>
		</section>
	}
</div>

<style>
	h6 {
		font-size: 16px;
		margin-bottom: 1rem;
	}

	.btn:hover {
		transform: translateY(-2px);
		transition: all 0.2s ease-in-out;
	}

	.card {
		backdrop-filter: blur(10px);
	}

	.btn-custom {
		background-color: #344e41;
		color: white;
		border: none;
		border-radius: 8px;
		transition: 0.3s;
	}

		.btn-custom:hover {
			background-color: #3a5a40;
		}

	.btn-action {
		background-color: #588157;
		color: white;
		border: none;
		border-radius: 8px;
		transition: 0.3s;
	}

		.btn-action:hover {
			background-color: #3a5a40;
		}
</style>
@inject HttpClient Http
@inject NavigationManager Nav
@code {
	private List<DirectBookingModel>? directBookingModels = new List<DirectBookingModel>();
	private List<OnlineBookingModel>? onlineBookingModels = new List<OnlineBookingModel>();

	public DirectBookinDTO? DirectBookinDTO = new();
	public DirectBookinDTO DirectBookinDTOs = new();

	public OnlineBookingDto? OnlineBookingDto = new();
	public OnlineBookingDto? OnlineBookingDtos = new();
	public Guid Id { get; set; }

	public bool PagedateLoad;
	public string? name;
	public string? address;
	public string? phone;
	public string? email;
	public string? agentName = "None";
	public double adults;
	public double kids;
	public string? basis;
	public double total;
	public double adultsStayTotal;
	public double kidsStayTotal;
	public double grandTotal;
	public double totalAdvancePayment;
	public double totalBalanceLKR;
	public double totalBalanceUSD;
	public bool Conformation { get; set; }
	public string? status;
	public Guid GuidId;
	public Guid ReserveNo;
	public string? CustomerType;
	public string? AccomadationType;
	public string? VoucherNo;
	public string? TourNo;
	public decimal USDExch;
	public decimal RoomRate;
	public string? Basis;
	public DateTime CheckInDate;
	public DateTime CheckOutDate;
	public TimeOnly arrivalTime;
	public TimeOnly depatureTime;
	public bool showNotification = false;
	public bool CheckIn;
	public bool CheckOut;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
		StateHasChanged();
	}
	public async Task LoadData()
	{

		try
		{
			directBookingModels = await Http.GetFromJsonAsync<List<DirectBookingModel>>("https://localhost:4000/api/DirectBooking");
			onlineBookingModels = await Http.GetFromJsonAsync<List<OnlineBookingModel>>("https://localhost:4000/api/OnlineBooking");
			Console.WriteLine("Pass");
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error Massage : " + ex.Message);
		}
	}
	private async Task ClickConformationsDirect(Guid id)
	{
		try
		{
			DirectBookinDTO = await Http.GetFromJsonAsync<DirectBookinDTO>(
				$"https://localhost:4000/api/DirectBooking/{id}"
			);
			this.Id = id;
			total = kids + adults;
			name = $"{DirectBookinDTO?.FirstName + "" + DirectBookinDTO?.LastName}";
			address = DirectBookinDTO?.Address ?? "";
			phone = DirectBookinDTO?.PhoneNumber ?? "";
			email = DirectBookinDTO?.EmailAddress ?? "";
			total = adults + kids;
			Conformation = DirectBookinDTO!.Conformation;
			adults = DirectBookinDTO.Adult;
			kids = DirectBookinDTO.Kids;
			CheckInDate = DirectBookinDTO!.CheckInDate;
			CheckOutDate = DirectBookinDTO!.CheckOutDate;
			email = DirectBookinDTO?.EmailAddress ?? "";
			phone = DirectBookinDTO?.PhoneNumber ?? "";
			arrivalTime = DirectBookinDTO!.CheckInTime;
			depatureTime = DirectBookinDTO!.CheckOutTime;
			CheckIn = DirectBookinDTO.CheckIn;
			CheckOut = DirectBookinDTO.CheckOut;
			PagedateLoad = true;
			status = "DirectBooking";
			var guid = Guid.NewGuid();
			GuidId = guid;

			await JS.InvokeVoidAsync("scrollToSection", "invoice-section");

			StateHasChanged();

		}
		catch (HttpRequestException ex)
		{
			Console.WriteLine($"Connection error: {ex.Message}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"General error: {ex.Message}");
		}
	}

	private async Task ClickConformationsOnline(Guid id)
	{
		try
		{
			OnlineBookingDto = await Http.GetFromJsonAsync<OnlineBookingDto>(
						$"https://localhost:4000/api/OnlineBooking/{id}"
					);

			this.Id = id;
			total = kids + adults;
			name = $"{OnlineBookingDto?.FirstName + " " + OnlineBookingDto?.LastName}";
			address = OnlineBookingDto?.Address ?? "";
			phone = OnlineBookingDto?.PhoneNumber ?? "";
			email = OnlineBookingDto?.EmailAddress ?? "";
			CheckInDate = OnlineBookingDto!.CheckInDate;
			CheckOutDate = OnlineBookingDto!.CheckOutDate;
			total = adults + kids;
			Conformation = OnlineBookingDto!.Conformation;
			address = OnlineBookingDto?.Address ?? "";
			email = OnlineBookingDto?.EmailAddress ?? "";
			phone = OnlineBookingDto?.PhoneNumber ?? "";
			arrivalTime = OnlineBookingDto!.CheckInTime;
			depatureTime = OnlineBookingDto!.CheckOutTime;
			CheckIn = OnlineBookingDto.CheckIn;
			CheckOut = OnlineBookingDto.CheckOut;
			PagedateLoad = true;

			status = "OnlineBooking";

			await JS.InvokeVoidAsync("scrollToSection", "invoice-section");
			StateHasChanged();
		}
		catch (HttpRequestException ex)
		{
			Console.WriteLine($"Connection error: {ex.Message}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"General error: {ex.Message}");
		}
	}
	private Task clickViewAllReservations(MouseEventArgs args)
	{
		throw new NotImplementedException();
	}
	private async Task clickConform(MouseEventArgs args)
	{
		try
		{
			if (status == "DirectBooking")
			{
				try
				{
					Console.WriteLine($"Confirming booking ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/DirectBooking/{Id}/confirm", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Direct Booking Sucessfully Confirming.....");
						Console.WriteLine("Booking confirmed successfully");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error confirming booking: {errorContent}");
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}
			else
			{
				try
				{
					Console.WriteLine($"Confirming booking ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/OnlineBooking/{Id}/confirm", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Online Booking Sucessfully Confirming.....");
						Console.WriteLine("Booking confirmed successfully");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error confirming booking: {errorContent}");
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Err : {ex.Message}");
		}

	}

	public void HandleUnConfirmClick(string message)
	{
		Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
		Snackbar.Configuration.MaxDisplayedSnackbars = 10;
		Snackbar.Add(message, Severity.Normal, config =>
		{
			config.ShowCloseIcon = false;
			config.SnackbarVariant = Variant.Filled;
		});
	}


	private async Task clickAdvancePay(Guid Id)
	{
		try
		{
			if (status == "DirectBooking")
			{
				var Direct = await Http.GetFromJsonAsync<DirectBookinDTO>($"https://localhost:4000/api/DirectBooking/{Id}");
				if (Direct != null)
				{
					Nav.NavigateTo($"/ClientManagement/AdvancePay/{Id}");
					HandleUnConfirmClick("Success");

				}
				else
				{
					Console.WriteLine("Err : There is no any record");
					HandleUnConfirmClick("There is no any record");

				}
			}
			else
			{
				var Online = await Http.GetFromJsonAsync<DirectBookinDTO>($"https://localhost:4000/api/OnlineBooking/{Id}");
				if (Online != null)
				{
					Nav.NavigateTo($"/ClientManagement/AdvancePay/{Id}");
					HandleUnConfirmClick("Success");

				}
				else
				{
					Console.WriteLine("Err : There is no any record");
					HandleUnConfirmClick("There is no any record");

				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
	private Task clickCancellation(MouseEventArgs args)
	{
		throw new NotImplementedException();
	}
	private async Task ClickCheckIn(MouseEventArgs args)
	{
		try
		{
			if (status == "DirectBooking")
			{
				try
				{
					Console.WriteLine($"Customer CheckIn ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/DirectBooking/{Id}/checkin", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Sucessfully Check-In.....");
						Console.WriteLine("Sucessfully Check-In.....");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error customer Check-In: {errorContent}");

					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}
			else
			{
				try
				{
					Console.WriteLine($"Customer CheckIn ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/OnlineBooking/{Id}/checkin", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Sucessfully Check-In.....");
						Console.WriteLine("Sucessfully Check-In.....");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error checkIn customer: {errorContent}");
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Err : {ex.Message}");
		}
	}
	private async Task ClickCheckOut(MouseEventArgs args)
	{
		try
		{
			if (status == "DirectBooking")
			{
				try
				{
					Console.WriteLine($"Customer CheckOut ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/DirectBooking/{Id}/checkout", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Sucessfully Check-Out.....");
						Console.WriteLine("Sucessfully Check-Out.....");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error customer Check-Out: {errorContent}");

					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}
			else
			{
				try
				{
					Console.WriteLine($"Customer CheckIn ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/OnlineBooking/{Id}/checkout", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Sucessfully Check-Out.....");
						Console.WriteLine("Sucessfully Check-Out.....");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error CheckOut customer: {errorContent}");
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Err : {ex.Message}");
		}
	}
	private async Task clickUnConform(MouseEventArgs args)
	{
		try
		{
			if (status == "DirectBooking")
			{
				try
				{
					Console.WriteLine($"Confirming booking ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/DirectBooking/{Id}/unconfirm", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("DirectBooking Sucessfully Unconfirming.....");
						Console.WriteLine("Booking confirmed successfully");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error confirming booking: {errorContent}");

					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}
			else
			{
				try
				{
					Console.WriteLine($"Confirming booking ID: {Id}");

					// Create JSON content for the PUT request
					var jsonContent = JsonSerializer.Serialize(new { });
					var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
					var response = await Http.PutAsync($"https://localhost:4000/api/OnlineBooking/{Id}/unconfirm", content);
					Console.WriteLine($"Response Status: {response.StatusCode}");

					if (response.IsSuccessStatusCode)
					{
						var result = await response.Content.ReadAsStringAsync();
						StateHasChanged();
						HandleUnConfirmClick("Onlien Booking Sucessfully Unconfirming.....");
						Console.WriteLine("Booking confirmed successfully");
						Console.WriteLine($"Result: {result}");
					}
					else
					{
						var errorContent = await response.Content.ReadAsStringAsync();
						Console.WriteLine($"Error confirming booking: {errorContent}");
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Exception: {ex.Message}");
				}
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Err : {ex.Message}");
		}
	}
}
