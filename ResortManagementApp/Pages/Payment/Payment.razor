@page "/Payments/Checkout/{Id:guid}"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Nav
@layout MainLayout


<div class="checkout-container container mt-4">
    <div class="row">
        <!-- Left: Payment Form -->
        <div class="col-lg-6 mb-4">
            <div class="card border-0 shadow">
                <div class="card-header text-white" style="background-color:#344e41">
                    <h5 class="mb-0">Payment & Checkout</h5>
                </div>
                <div class="card-body">
                    <!-- Amount -->
                    <div class="mb-3">
                        <label class="form-label">Amount (LKR)</label>
                        <input type="number" class="form-control" @bind="Model.Amount" />
                    </div>

                    <!-- Payment Method -->
                    <div class="mb-3">
                        <label class="form-label">Payment Method</label>
                        <select class="form-select" @bind="Model.PaymentMethod">
                            <option value="Cash">Cash</option>
                            <option value="Card">Card (Manual)</option>
                            <option value="Online">Online (Gateway)</option>
                        </select>
                    </div>

                    <!-- Notes -->
                    <div class="mb-3">
                        <label class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" rows="2" @bind="Model.Notes"></textarea>
                    </div>

                    <!-- Card Section -->
                    @if (Model.PaymentMethod == "Card" || Model.PaymentMethod == "Online")
                    {
                        <div class="rounded p-3" style="background-color:#dad7cd">
                            <h6>Card / Gateway Info</h6>
                            <div class="mb-2">
                                <input type="text" class="form-control" placeholder="Cardholder Name" @bind="Card.CardHolder" />
                            </div>
                            <div class="mb-2">
                                <input type="text" class="form-control" placeholder="Card Number" maxlength="19" @bind="Card.CardNumber" />
                            </div>
                            <div class="row g-2">
                                <div class="col">
                                    <input type="text" class="form-control" placeholder="MM/YY" @bind="Card.Expiry" />
                                </div>
                                <div class="col-4">
                                    <input type="text" class="form-control" placeholder="CVV" maxlength="4" @bind="Card.CVV" />
                                </div>
                            </div>
                            @if (Model.PaymentMethod == "Online")
                            {
                                <small class="text-muted">Online payments will redirect to the gateway.</small>
                            }
                        </div>
                    }

                    <!-- Buttons -->
                    <div class="d-flex mt-4 gap-2">
                        <button class="btn btn-success" @onclick="SubmitPayment" disabled="@_isSubmitting">
                            @_isSubmitting ? "Processing..." : "Pay & Complete"
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right: Invoice Summary -->
        <div class="col-lg-6 mb-4">
            <div class="card border-0 shadow">
                <div class="card-header text-white" style="background-color:#3a5a40">
                    <h6 class="mb-0">Invoice Summary</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total</span>
                        <span class="fw-bold">Rs @BookingTotalDisplay</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Advance Paid</span>
                        <span>Rs @AdvancePaidDisplay</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Balance</span>
                        <span class="fw-bold text-success">Rs @BalanceDisplay</span>
                    </div>
                    <hr />
                    <div class="d-flex flex-wrap gap-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => PrefillCash()">Set to Cash</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => PrefillCard()">Set to Card</button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => PrefillFull()">Pay Full Balance</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .checkout-container {
        font-size: 0.95rem;
    }

    .card {
        border-radius: 12px;
    }

    .card-header {
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }
</style>

@code {
    [Parameter] public Guid? Id { get; set; }

    private PaymentDto Model { get; set; } = new() { Currency = "LKR", PaymentMethod = "Cash" };
    private CardInfo Card { get; set; } = new();

    private bool _isSubmitting = false;

    // Example invoice values (should come from API)
    private decimal BookingTotalDisplay = 15000m;
    private decimal AdvancePaidDisplay = 5000m;
    private decimal BalanceDisplay => Math.Max(0, BookingTotalDisplay - AdvancePaidDisplay);

    private void PrefillCash() { Model.PaymentMethod = "Cash"; Model.Amount = BalanceDisplay; }
    private void PrefillCard() { Model.PaymentMethod = "Card"; Model.Amount = BalanceDisplay; }
    private void PrefillFull() { Model.Amount = BalanceDisplay; }

    private async Task SubmitPayment()
    {
        if (Model.Amount <= 0) { Console.WriteLine("Invalid amount"); return; }
        _isSubmitting = true;
        try
        {
            var payload = new
            {
                BookingId = Id,
                Model.Amount,
                Model.Currency,
                Model.PaymentMethod,
                Model.Notes,
                Card = (Model.PaymentMethod == "Card" || Model.PaymentMethod == "Online") ? Card : null
            };

            var resp = await Http.PostAsJsonAsync("/api/Payment/Checkout", payload);
            if (resp.IsSuccessStatusCode)
            {
                Console.WriteLine("Payment success!");
                Nav.NavigateTo("/Reservations/Inhouse", true);
            }
            else
            {
                var txt = await resp.Content.ReadAsStringAsync();
                Console.WriteLine("Payment failed: " + txt);
            }
        }
        catch (Exception ex) { Console.WriteLine("Error: " + ex.Message); }
        finally { _isSubmitting = false; }
    }

    private void Cancel() => Nav.NavigateTo("/Reservations/Inhouse");

    // DTOs
    public class PaymentDto
    {
        public Guid BookingId { get; set; }
        public decimal Amount { get; set; }
        public string Currency { get; set; } = "LKR";
        public string PaymentMethod { get; set; } = "Cash";
        public string? Notes { get; set; }
    }
    public class CardInfo
    {
        public string? CardHolder { get; set; }
        public string? CardNumber { get; set; }
        public string? Expiry { get; set; }
        public string? CVV { get; set; }
    }
}
