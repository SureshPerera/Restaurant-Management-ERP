@page "/ClientManagement/DirectDelete/{Id:guid}"
@using ResortManagementApp.Models.Reservation
@using ResortManagementApp.Models.Reservation.DTO
@layout MainLayout

<div class="card p-3">
	<h3 class="mb-3 text-center">Delete Customer</h3>

	@if (directBookingModel == null)
	{
		<p><em>Loading customer details...</em></p>
	}
	else
	{
		<p>
			Are you sure you want to delete customer with name
			<strong>@directBookingModel.FirstName @directBookingModel.LastName</strong>?
		</p>

		<div class="d-flex gap-2">
			<button class="btn btn-danger" @onclick="DeleteCustomer">Delete</button>
			<a class="btn btn-secondary" href="/ClientManagement">Cancel</a>
		</div>
	}
</div>

@inject HttpClient http
@inject NavigationManager navManager


@code {
	[Parameter]
	public Guid Id { get; set; }
	public DirectBookingModel? directBookingModel;
	public DirectBookinDTO directBookingDTO = new();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Fetch the customer's info by ID
			directBookingModel = await http.GetFromJsonAsync<DirectBookingModel>($"https://localhost:4000/api/DirectBooking/{Id}");

		}
		catch (Exception ex)
		{
			Console.WriteLine("Error loading customer: " + ex.Message);
		}
	}


	public async Task DeleteCustomer()
	{
		try
		{
			var responce = await http.DeleteFromJsonAsync<DirectBookingModel>($"https://localhost:4000/api/DirectBooking/{Id}");
			
			navManager.NavigateTo("/ClientManagement/Client");
		}
		catch (Exception ex)
		{
			Console.WriteLine("Error : " + ex.Message);
		}
	}

}
