@page "/ClientManagement"
@using ResortManagementApp.Models.Administration.DTOS
@using ResortManagementApp.Models.ClientManagement.Client
@using ResortManagementApp.Models.ClientManagement.Message
@using ResortManagementApp.Pages.ComponentCss
@layout MainLayout

<div class="container my-5">

	<!-- Header -->
	<div class="mb-4 text-center">
		<h2 class="fw-bold">Client Management</h2>
		<p class="text-muted">Manage customers, send messages, and track engagement</p>
	</div>

	<!-- Summary Cards -->
	<section class="row g-4 mb-5">
		<div class="col-md-3">
			<div class="card kpi-card border-0 shadow-sm">
				<div class="card-body text-center">
					<h6 class="text-muted">Total Clients</h6>
					<h3 class="fw-bold">@TotalClient</h3>
					<small class="text-success"><i class="bi bi-graph-up"></i> +12% vs last month</small>
				</div>
			</div>
		</div>
		<div class="col-md-3">
			<div class="card kpi-card border-0 shadow-sm">
				<div class="card-body text-center">
					<h6 class="text-muted">New Clients (Year)</h6>
					<h3 class="fw-bold">@NewClientsThisYear</h3>
					<small class="text-info"><i class="bi bi-calendar"></i> Past 12 months</small>
				</div>
			</div>
		</div>
		<div class="col-md-3">
			<div class="card kpi-card border-0 shadow-sm">
				<div class="card-body text-center">
					<h6 class="text-muted">Retention Rate</h6>
					<h3 class="fw-bold">@AvgClientsPerMonth</h3>
					<small class="text-warning"><i class="bi bi-people"></i> Avg engagement</small>
				</div>
			</div>
		</div>
		<div class="col-md-3">
			<div class="card kpi-card border-0 shadow-sm">
				<div class="card-body text-center">
					<h6 class="text-muted">Active Clients</h6>
					<h3 class="fw-bold">@ClientCountThisMonth</h3>
					<small class="text-primary"><i class="bi bi-lightning-charge"></i> Current month</small>
				</div>
			</div>
		</div>
	</section>

	<!-- Messaging Panel -->
	<div class="card mb-5 border-0 shadow-sm">
		<div class="card-header bg-dark text-white">
			<h5 class="mb-0">Send Message</h5>
		</div>
		<div class="card-body d-flex align-items-end flex-wrap gap-3">
			<div>
				<label class="form-label fw-bold">Message Type</label>
				<select id="type" class="form-select shadow-sm" @bind="MessageDtos.Type">
					<option>SMS</option>
					<option>Email</option>
				</select>
			</div>
			<div class="flex-grow-1">
				<label class="form-label fw-bold">Message</label>
				<textarea @bind="MessageDtos.Messages" class="form-control shadow-sm" rows="2" placeholder="Enter your message..."></textarea>
			</div>
			<div class="d-flex gap-2">
				<button class="btn btn-success shadow-sm" type="button" @onclick="SentSMS">
					<i class="bi bi-chat-dots me-1"></i> Send SMS
				</button>
				<button class="btn btn-primary shadow-sm" type="button" @onclick="SentEmail">
					<i class="bi bi-envelope me-1"></i> Send Email
				</button>
			</div>
		</div>
	</div>

	<!-- Customers Table -->
	<div class="card border-0 shadow-sm">
		<div class="card-header d-flex justify-content-between align-items-center bg-light">
			<h5 class="mb-0">All Booking Customers</h5>
			<a href="/ClientManagement/Create" class="btn btn-outline-success shadow-sm">
				<i class="bi bi-person-plus-fill me-1"></i> Add Customer
			</a>
		</div>
		<div class="card-body p-0">
			@if (ClientDto == null || !ClientDto.Any())
			{
				<div class="text-muted p-4 text-center">
					<Searching />
					<p class="mt-2">No customers found...</p>
				</div>
			}
			else
			{
				<div class="table-responsive">
					<table class="table-hover mb-0 table align-middle">
						<thead class="table-light">
							<tr>
								<th>Name</th>
								<th>Phone</th>
								<th>Address</th>
								<th>Email</th>
								<th>NIC</th>
								<th>Nationality</th>

								<th class="text-center">Actions</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in ClientDto)
							{
								<tr>
									<td>@(item.FirstName + " " + item.LastName)</td>
									<td>@item.PhoneNumber</td>
									<td>@item.Address</td>
									<td>@item.EmailAddress</td>
									<td>@item.NIC</td>
									<td>@item.Nationality</td>

									<td class="text-center">
										<button class="btn btn-sm btn-outline-info me-1" title="Send Message" @onclick="ClickMassage">
											<i class="bi bi-send"></i>
										</button>
										<a class="btn btn-sm btn-outline-warning me-1" href="/ClientManagement/AdvancePay/@item.Id" title="Advance Pay">
											<i class="bi bi-cash-coin"></i>
										</a>
										<a class="btn btn-sm btn-outline-primary me-1" href="/ClientManagement/DirectEdit/@item.Id" title="Edit">
											<i class="bi bi-pencil-square"></i>
										</a>
										<a class="btn btn-sm btn-outline-danger" href="/ClientManagement/DirectDelete/@item.Id" title="Delete">
											<i class="bi bi-trash-fill"></i>
										</a>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	</div>
</div>

<style>
	.kpi-card {
		border-radius: 1rem;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
	}

		.kpi-card:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 20px rgba(0,0,0,0.15);
		}

	.btn-sm {
		border-radius: 50%;
		width: 36px;
		height: 36px;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0;
	}

	.table-hover tbody tr:hover {
		background-color: #f6faf7;
	}
</style>

@inject HttpClient http
@inject IJSRuntime JS

@code {
	public List<ClientModelDto>? ClientDto { get; set; } = new List<ClientModelDto>();
	public MessageDto MessageDtos { get; set; } = new();
	public int? TotalClient { get; set; }
	public int? ClientCountThisMonth { get; set; }
	public int NewClientsThisYear { get; set; }
	public double AvgClientsPerMonth { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			ClientDto = await http.GetFromJsonAsync<List<ClientModelDto>>("https://localhost:4000/api/Client");
			if (ClientDto != null)
			{
				TotalClient = ClientDto?.Count ?? 0;

				var today = DateTime.Today;
				var fromDate = today.AddDays(-30);
				ClientCountThisMonth = ClientDto?.Count(a => a.CheckInDate >= fromDate) ?? 0;

				var yearStart = new DateTime(DateTime.Today.Year, 1, 1);
				var clientsThisYear = ClientDto?
				.Where(c => c.CheckInDate >= yearStart && c.CheckInDate <= today)
				.ToList();
				NewClientsThisYear = clientsThisYear?.Count ?? 0;

				var monthsPassed = ((today.Year - yearStart.Year) * 12) + today.Month - yearStart.Month + 1;
				AvgClientsPerMonth = monthsPassed > 0
					? (double)NewClientsThisYear / monthsPassed
					: 0;
				StateHasChanged();
			}
			Console.WriteLine("ClientDto is Empty");

		}
		catch (Exception ex)
		{
			Console.WriteLine("Err : " + ex.Message);
		}
		
	}

	private Task SentSMS(MouseEventArgs args)
	{
		// Implement SMS sending
		return Task.CompletedTask;
	}

	private Task SentEmail(MouseEventArgs args)
	{
		// Implement Email sending
		return Task.CompletedTask;
	}

	private async Task ClickMassage(MouseEventArgs args)
	{
		await JS!.InvokeVoidAsync("focusElement", "type");
	}
}
